// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"

	model "github.com/Astemirdum/library-service/library/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockLibraryService is a mock of LibraryService interface.
type MockLibraryService struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryServiceMockRecorder
}

// MockLibraryServiceMockRecorder is the mock recorder for MockLibraryService.
type MockLibraryServiceMockRecorder struct {
	mock *MockLibraryService
}

// NewMockLibraryService creates a new mock instance.
func NewMockLibraryService(ctrl *gomock.Controller) *MockLibraryService {
	mock := &MockLibraryService{ctrl: ctrl}
	mock.recorder = &MockLibraryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibraryService) EXPECT() *MockLibraryServiceMockRecorder {
	return m.recorder
}

// AvailableCount mocks base method.
func (m *MockLibraryService) AvailableCount(ctx context.Context, libraryID, bookID int, isReturn bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableCount", ctx, libraryID, bookID, isReturn)
	ret0, _ := ret[0].(error)
	return ret0
}

// AvailableCount indicates an expected call of AvailableCount.
func (mr *MockLibraryServiceMockRecorder) AvailableCount(ctx, libraryID, bookID, isReturn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableCount", reflect.TypeOf((*MockLibraryService)(nil).AvailableCount), ctx, libraryID, bookID, isReturn)
}

// GetBook mocks base method.
func (m *MockLibraryService) GetBook(ctx context.Context, libraryUid, bookUid string) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, libraryUid, bookUid)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockLibraryServiceMockRecorder) GetBook(ctx, libraryUid, bookUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockLibraryService)(nil).GetBook), ctx, libraryUid, bookUid)
}

// GetLibrary mocks base method.
func (m *MockLibraryService) GetLibrary(ctx context.Context, libraryUid string) (model.Library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibrary", ctx, libraryUid)
	ret0, _ := ret[0].(model.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLibrary indicates an expected call of GetLibrary.
func (mr *MockLibraryServiceMockRecorder) GetLibrary(ctx, libraryUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibrary", reflect.TypeOf((*MockLibraryService)(nil).GetLibrary), ctx, libraryUid)
}

// ListBooks mocks base method.
func (m *MockLibraryService) ListBooks(ctx context.Context, libraryUid string, showAll bool, page, size int) (model.ListBooks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", ctx, libraryUid, showAll, page, size)
	ret0, _ := ret[0].(model.ListBooks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockLibraryServiceMockRecorder) ListBooks(ctx, libraryUid, showAll, page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockLibraryService)(nil).ListBooks), ctx, libraryUid, showAll, page, size)
}

// ListLibrary mocks base method.
func (m *MockLibraryService) ListLibrary(ctx context.Context, city string, page, size int) (model.ListLibraries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLibrary", ctx, city, page, size)
	ret0, _ := ret[0].(model.ListLibraries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLibrary indicates an expected call of ListLibrary.
func (mr *MockLibraryServiceMockRecorder) ListLibrary(ctx, city, page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLibrary", reflect.TypeOf((*MockLibraryService)(nil).ListLibrary), ctx, city, page, size)
}
